def 8 # 8 is just made up, I'm just assuming it doesn't need more than 8.
	push [] # array is at stack[0]
	push 0 # counter at stack[1]
	push 5 # we're making it 5 elements long
	pushRefFrom 0
	arrayLengthSet
	# display length
		push "Array Length: "
		# get length
			pushFrom 0
			arrayLength
			intToString
		push "\n"
		executeFunctionExternal 2 3
		pop
	
	# fill it with 0,1,2,3,4 - use element at stack[1] as counter
	pushFrom 1 # this one is value for writeTo
		pushFrom 1 # this one is index for arrayRefElement
		pushRefFrom 0 # and this is ref to array for arrayRefElement
		ArrayRefElement
	writeToRef
	# increment counter
	pushFrom 1
	push 1
	mathAddInt
	writeTo 1
	# check if counter < 5
	pushFrom 1
	push 5
	isGreaterInt
	JumpIf 12 # remember, lines that are comments don't count, so it needs to jump to instruction index 12, not line 12
	
	# now write it's contents, lets just use a function for that
	pushFrom 0
	executeFunction 1 1
	terminate
	
	
def 8 # again, it **probably** doesn't need more than 8
	# the array to print is already at stack[0], passed as an argument
	push 0 # this is a counter, at stack[1]
	pushFrom 0
	arrayLength # this puts array length at stack[2]
	
	pushFrom 1
	pushFrom 0
	arrayElement
	deref
	executeFunctionExternal 0 1
	pop
	# increment counter
	pushFrom 1
	push 1
	mathAddInt
	writeTo 1
	# check if counter < length
	pushFrom 1
	pushFrom 2
	isGreaterInt
	jumpIf 3
	terminate